[project]
name = "beets-essentia-tensorflow"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "beets>=2.2.0",
    "confuse>=2.0.1",
    "numpy<2.0",
]
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
sources = ["src"]
only-include = ["src/beetsplug/essentia"]

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "responses>=0.25.6",
    "ruff>=0.9.7",
]

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["test"]
python_files = ["test_*.py"]
pythonpath = [
    ".",
    "beetsplug"
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["ANN101"]

[tool.ruff.lint.extend-per-file-ignores]
"test/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "I", # Ignore imports
]

[tool.coverage.run]
source = ["beetsplug"]
omit = ["test/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
show_error_codes = true
no_implicit_optional = true
warn_return_any = true
warn_unused_ignores = true
exclude = ["test"]

[[tool.mypy.overrides]]
module = ["beets", "beets.plugins", "beets.util"]
ignore_missing_imports = true
